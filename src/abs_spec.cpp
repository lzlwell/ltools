#include"abs_spec.h"

int main()
{
	int neig;
	double *eigs, *osqr; // eigenvalues and oscillator strength square
	double sigma;
	double range;
	int npts = 2000;  // npts sampling
	double x;
	double pts[2000];
	int i, j;
	double findmax; // find max eigenvalue
	double prefactor;
	double pi = 3.14159265359;
	double Ry2eV = 13.605698066;
	double vol;
	int nspin;
  int ifabs;
  double d; // z-axis of supercell for 2D
  double c = 299792458.0; // speed of light

	FILE *infile, *outfile;
	FILE *eigvalplot;
  FILE *absorbance;

	printf("Input format: abs_spec\n\n");
	printf("This program reads eigenvalues.dat file generated by absorption code in BerkeleyGW package.\n");
	printf("It uses user defined broadening factor and use gaussian broadening to plot absorption spectrum.\n");
	printf("It outputs abs_spec.dat\n");

	printf("\nPlease input the broadening factor:\n");
	scanf("%lf", &sigma);

	infile = fopen("eigenvalues.dat", "r");
	outfile = fopen("abs_spec.dat", "w");

	while(fgetc(infile) != '=');
	fscanf(infile, "%d", &neig);
	while(fgetc(infile) != '=');
	fscanf(infile, "%lf", &vol);
	while(fgetc(infile) != '=');
	fscanf(infile, "%d", &nspin);
	while(fgetc(infile) != '\n');
	while(fgetc(infile) != '\n');

	prefactor = Ry2eV * 16*pi*pi/vol/nspin;

	eigs = (double*)malloc(neig*sizeof(double));
	osqr = (double*)malloc(neig*sizeof(double));

	findmax = 0.0;
	for(i=0; i<neig; i++)
	{
		fscanf(infile, "%lf %lf", eigs+i, osqr+i);
		while(fgetc(infile) != '\n');

		if(eigs[i] > findmax)
			findmax = eigs[i];
	}

	range = findmax;

	for(i=0; i<npts; i++)
	{
		x = i*range/(npts-1);
		pts[i] = 0;

		for(j=0; j<neig; j++)
		{
			pts[i] += prefactor * osqr[j] * gaussian(x, eigs[j], sigma);
		}

		fprintf(outfile, "%f   %f  \n", x, pts[i]);

		if(i%100 == 0)
			printf("%d/%d is done!\n", i+1, npts);
	}

  // Now we add the function to plot absolute absorbance for 2D
  // Implemented as an option, because only valid for 2D material, that light passes through, there is a real absorbance,
  // i.e., how much percentage of light is absorbed
  // We a using a simplified version, i.e. and approximated one from
  // PRL 103, 186802 (2009) by Li Yang et al.
  // According equations therein, we have approximately,
  //
  // A(omega) = epsilon_2 * omega * d / c
  //
  // where d is the axis of the vaccum distance in the supercell, usually z-distance between the images in supercells
  // c is speed of light
  //

  printf("If this is a 2D material, do you like to plot the absorbance? 1: yes, 2:no\n");
  scanf("%d", &ifabs);

  if(ifabs)
  {
    absorbance = fopen("absorbance2d.dat", "w");

    printf("Please enter the distance in Angstrom between two 2D sheets in adjacent layers in supercells, i.e. generally c-axis of supercell:\n");
    scanf("%lf", &d);

  	for(i=0; i<npts; i++)
  	{
  		x = i*range/(npts-1);

  		fprintf(absorbance, "%f   %f  \n", x, pts[i]*d*2.417990504024*10000/c);
  	}

    fclose(absorbance);
  }


  // This is to plot discrete energy levels, for Origin to easily plot
	eigvalplot = fopen("eigvalplot.dat", "w");
	for(i=0; i<neig; i++)
		fprintf(eigvalplot, "-10.0   %f\n10.0    %f\n\n", eigs[i], eigs[i]);
	fclose(eigvalplot);

	fclose(infile);
	fclose(outfile);

	free(osqr);
	free(eigs);

	return 0;
}

	

